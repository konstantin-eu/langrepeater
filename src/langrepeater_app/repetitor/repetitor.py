# german_repetitor/repetitor/repetitor.py

import logging
from pathlib import Path

# Assuming these modules and classes exist based on previous steps
from src.langrepeater_app.repetitor.config import LanguageRepetitorConfig
from src.langrepeater_app.repetitor.exceptions import RepetitorError, AudioProcessingError, VideoProcessingError
from src.langrepeater_app.repetitor.audio.generator import AudioGeneratorV1 # Assuming V1 is the primary implementation
from src.langrepeater_app.repetitor.video_generator import VideoGenerator
from src.langrepeater_app.repetitor.audio.models import RenderJob # Assuming RenderJob is in audio/models or phrasereader/models

logger = logging.getLogger(__name__)

class LanguageRepetitor:
    """
    Orchestrates the creation of audio and video media tracks based on phrases.
    Equivalent to Java's LanguageRepetitor.java
    """

    def __init__(self, job: RenderJob):
        """
        Initializes the LanguageRepetitor.

        Args:
            job: The RenderJob containing configuration and phrases.

        Raises:
            ConfigError: If configuration is invalid.
            RepetitorError: For other initialization errors.
        """
        if False:
            if not isinstance(job, RenderJob):
                raise TypeError("job must be an instance of RenderJob")
            if not isinstance(job.config, LanguageRepetitorConfig):
                 raise TypeError("job.config must be an instance of LanguageRepetitorConfig")

        self.job = job
        self.config = job.config # Convenience reference

        logger.info(f"Initializing LanguageRepetitor for job related to: {self.config.track_identifier}")

        try:
            # Initialize the specific Audio Generator implementation
            # We might choose the implementation based on config later if needed
            self.audio_generator = AudioGeneratorV1(self.config)
            logger.info("AudioGenerator initialized.")

            # Initialize the Video Generator
            self.video_generator = VideoGenerator(self.config)
            logger.info("VideoGenerator initialized.")

        except Exception as e:
            logger.error(f"Failed to initialize LanguageRepetitor components: {e}", exc_info=True)
            # Wrap the original exception for better context
            raise RepetitorError(f"Initialization failed: {e}") from e

    def create_media_track(self) -> None:
        """
        Creates the final media output (audio and potentially video with subtitles).

        Raises:
            AudioProcessingError: If audio generation fails.
            VideoProcessingError: If video generation fails.
            RepetitorError: For other processing errors.
        """
        logger.info("Starting media track creation...")
        audio_output_path: Path | None = None
        subtitle_output_path: Path | None = None

        # --- Step 1: Create Audio and Subtitles ---
        if self.config.create_audio:
            logger.info("Generating audio track...")
            try:
                # The audio generator should handle audio creation and subtitle data generation
                audio_output_path, subtitle_output_path = self.audio_generator.create_audio(self.job)
                if not audio_output_path or not audio_output_path.exists():
                     raise AudioProcessingError("Audio generator did not produce a valid output file path.")
                logger.info(f"Audio generation complete. Output: {audio_output_path}")
                if subtitle_output_path:
                    logger.info(f"Subtitle file generated: {subtitle_output_path}")
                else:
                    logger.info("No subtitle file was generated by the audio process.")

            except Exception as e:
                logger.error(f"Audio track generation failed: {e}", exc_info=True)
                # Clean up potentially incomplete audio file?
                # self.config.cleanup_temp_dir() # Or specific file cleanup
                raise AudioProcessingError(f"Audio generation failed: {e}") from e
        else:
            logger.warning("Audio creation is disabled in the configuration.")
            exit(1)
            # If audio isn't created, video usually can't be either unless pre-existing audio is used
            if self.config.create_video:
                 logger.error("Video creation requires audio creation to be enabled.")
                 raise ConfigError("Cannot create video without creating audio.")
            return # Nothing more to do

        # --- Step 2: Create Video (if enabled and audio succeeded) ---
        if self.config.create_video:
            logger.info("Generating video track...")
            if not audio_output_path:
                 # This case should ideally be caught earlier
                 logger.error("Cannot generate video because audio path is missing.")
                 raise VideoProcessingError("Audio path missing, cannot generate video.")

            try:
                # Pass the generated audio and subtitle paths to the video generator
                video_output_path = self.video_generator.exec_ffmpeg(
                    audio_file_path=audio_output_path,
                    subtitle_file_path=subtitle_output_path # Pass None if no subtitles
                )
                logger.info(f"Video generation complete. Output: {video_output_path}")

            except Exception as e:
                logger.error(f"Video track generation failed: {e}", exc_info=True)
                # Clean up potentially incomplete video file?
                # self.config.cleanup_temp_dir() # Or specific file cleanup
                raise VideoProcessingError(f"Video generation failed: {e}") from e
        else:
            logger.info("Video creation is disabled in the configuration.")

        # --- Step 3: Cleanup (Optional) ---
        # Consider cleaning up intermediate files if desired
        # self.config.cleanup_temp_dir() # Example: remove the job's temp directory

        logger.info("Media track creation process finished.")

